index.html
'<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Downloader</title>
    <link rel="stylesheet" href="style.css">
</head>
<body class="dark-mode">
    <div class="container">
        <h1>YouTube Downloader</h1>
        <input type="text" id="url" placeholder="Enter YouTube URL or Playlist URL">
        <button id="mp3Btn" class="format-btn">MP3</button>
        <button id="mp4Btn" class="format-btn">MP4</button>
        <div id="quality-container" class="hidden">
            <select id="quality"></select>
        </div>
        <button id="downloadBtn" class="hidden">Download</button>
        <div id="loader" class="hidden"></div>
        <div id="results"></div>
        <label class="switch">
            <input type="checkbox" id="themeToggle" checked>
            <span class="slider round"></span>
        </label>
    </div>
    <script src="script.js"></script>
</body>
</html>
'


script.js
'document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('mp3Btn').addEventListener('click', () => {
        loadQualityOptions('mp3');
    });

    document.getElementById('mp4Btn').addEventListener('click', () => {
        loadQualityOptions('mp4');
    });

    document.getElementById('downloadBtn').addEventListener('click', async () => {
        const url = document.getElementById('url').value;
        const format = document.querySelector('.selected').id.replace('Btn', '');
        const quality = document.getElementById('quality').value;
        const loader = document.getElementById('loader');
        const results = document.getElementById('results');

        loader.classList.remove('hidden');

        const response = await fetch(`/convert?url=${encodeURIComponent(url)}&format=${format}&quality=${quality}`);
        loader.classList.add('hidden');

        if (response.ok) {
            const data = await response.json();

            data.downloads.forEach(download => {
                const resultItem = document.createElement('div');
                resultItem.classList.add('result-item');

                const thumbnail = document.createElement('img');
                thumbnail.src = download.thumbnail;
                resultItem.appendChild(thumbnail);

                const info = document.createElement('div');
                info.classList.add('info');

                const title = document.createElement('h3');
                title.textContent = download.title;
                info.appendChild(title);

                const qualityText = format === 'mp3' ? `${quality}kbps` : `${quality}`;
                const durationText = `${Math.floor(download.duration / 60)}m ${download.duration % 60}s`;

                const qualityInfo = document.createElement('p');
                qualityInfo.textContent = `Format: ${download.format.toUpperCase()} | Quality: ${qualityText} | Duration: ${durationText}`;
                info.appendChild(qualityInfo);

                const downloadLink = document.createElement('a');
                downloadLink.href = `/download?url=${encodeURIComponent(download.url)}&format=${download.format}&quality=${download.quality}&title=${download.title}`;
                downloadLink.textContent = 'Download File';
                info.appendChild(downloadLink);

                resultItem.appendChild(info);
                results.appendChild(resultItem);
            });
        } else {
            alert('Error downloading file');
        }
    });

    document.getElementById('themeToggle').addEventListener('change', (event) => {
        document.body.classList.toggle('dark-mode', event.target.checked);
    });
});

function loadQualityOptions(format) {
    const quality = document.getElementById('quality');
    quality.innerHTML = '';

    if (format === 'mp3') {
        quality.innerHTML = `
            <option value="320kbps">320kbps</option>
            <option value="192kbps">192kbps</option>
            <option value="128kbps">128kbps</option>
            <option value="64kbps">64kbps</option>
        `;
    } else if (format === 'mp4') {
        quality.innerHTML = `
            <option value="137">1080p</option>
            <option value="136">720p</option>
            <option value="135">480p</option>
            <option value="134">360p</option>
        `;
    }

    document.getElementById('quality-container').classList.remove('hidden');
    document.getElementById('downloadBtn').classList.remove('hidden');
    document.getElementById('mp3Btn').classList.remove('selected');
    document.getElementById('mp4Btn').classList.remove('selected');
    document.getElementById(`${format}Btn`).classList.add('selected');
}
'

style.css
'body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    color: #333;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.dark-mode {
    background-color: #121212;
    color: #ffffff;
}

.container {
    background-color: #fff;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    text-align: center;
    max-width: 500px;
    width: 100%;
}

.dark-mode .container {
    background-color: #1e1e1e;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
}

h1 {
    margin-bottom: 20px;
}

input, select, button {
    margin: 10px 0;
    padding: 10px;
    width: calc(100% - 22px);
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
}

.dark-mode input, .dark-mode select, .dark-mode button {
    background-color: #333;
    color: #fff;
    border: 1px solid #555;
}

button {
    background-color: #28a745;
    color: white;
    cursor: pointer;
}

button:hover {
    background-color: #218838;
}

.dark-mode button {
    background-color: #0062cc;
}

.dark-mode button:hover {
    background-color: #0056b3;
}

.hidden {
    display: none;
}

#loader {
    border: 16px solid #f3f3f3;
    border-radius: 50%;
    border-top: 16px solid #3498db;
    width: 120px;
    height: 120px;
    animation: spin 2s linear infinite;
    margin: 20px auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

#results {
    margin-top: 20px;
}

.result-item {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
}

.dark-mode .result-item {
    background-color: #333;
    border: 1px solid #555;
}

.result-item img {
    max-width: 100px;
    height: auto;
    margin-right: 20px;
}

.result-item .info {
    flex: 1;
}

.result-item .info h3 {
    margin: 0 0 10px;
    font-size: 18px;
}

.result-item .info a {
    display: block;
    margin-top: 10px;
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    text-align: center;
}

.result-item .info a:hover {
    background-color: #0056b3;
}

.dark-mode .result-item .info a {
    background-color: #0062cc;
}

.dark-mode .result-item .info a:hover {
    background-color: #0056b3;
}

.switch {
    position: absolute;
    top: 10px;
    right: 10px;
}

.switch input { 
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: relative;
    cursor: pointer;
    width: 34px;
    height: 14px;
    background-color: #ccc;
    border-radius: 34px;
    transition: 0.4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: -6px;
    bottom: -6px;
    background-color: white;
    border-radius: 50%;
    transition: 0.4s;
}

input:checked + .slider {
    background-color: #2196F3;
}

input:checked + .slider:before {
    transform: translateX(20px);
}
'


index.js
'const express = require('express');
const ytdl = require('ytdl-core');
const ytpl = require('ytpl');
const ffmpeg = require('fluent-ffmpeg');
const ffmpegPath = require('ffmpeg-static');
const app = express();
const port = 3000;

ffmpeg.setFfmpegPath(ffmpegPath);

app.use(express.static('public'));

const itagMap = {
    '1080p': '137',
    '720p': '136',
    '480p': '135',
    '360p': '134',
    '320kbps': '251',
    '192kbps': '250',
    '128kbps': '140',
    '64kbps': '249'
};

app.get('/convert', async (req, res) => {
    const { url, format, quality } = req.query;
    if (!ytdl.validateURL(url) && !ytpl.validateID(url)) {
        return res.status(400).json({ success: false, error: 'Invalid YouTube URL or Playlist ID' });
    }

    const isPlaylist = ytpl.validateID(url);
    const downloadLinks = [];

    if (isPlaylist) {
        const playlist = await ytpl(url);
        for (const item of playlist.items) {
            const videoUrl = item.shortUrl;
            const videoInfo = await ytdl.getInfo(videoUrl);
            const videoTitle = videoInfo.videoDetails.title.replace(/[^a-zA-Z0-9]/g, '_');
            const thumbnail = videoInfo.videoDetails.thumbnails[0].url;
            const duration = videoInfo.videoDetails.lengthSeconds;
            downloadLinks.push({ title: videoTitle, url: videoUrl, thumbnail, format, quality, duration });
        }
        res.json({ success: true, downloads: downloadLinks });
    } else {
        const info = await ytdl.getInfo(url);
        const title = info.videoDetails.title.replace(/[^a-zA-Z0-9]/g, '_');
        const thumbnail = info.videoDetails.thumbnails[0].url;
        const duration = info.videoDetails.lengthSeconds;

        res.json({ success: true, downloads: [{ title, url, thumbnail, format, quality, duration }] });
    }
});

app.get('/download', (req, res) => {
    const { url, format, quality, title } = req.query;
    const itag = itagMap[quality];

    if (!itag) {
        return res.status(400).json({ success: false, error: 'Invalid quality parameter' });
    }

    const stream = ytdl(url, { quality: itag });
    const ffmpegStream = ffmpeg(stream).format(format);

    if (format === 'mp3') {
        ffmpegStream.audioBitrate(parseInt(quality));
    } else if (format === 'mp4') {
        ffmpegStream.videoCodec('libx264');
    }

    res.setHeader('Content-Disposition', `attachment; filename="${title}.${format}"`);
    res.setHeader('Content-Type', format === 'mp3' ? 'audio/mpeg' : 'video/mp4');

    ffmpegStream
        .on('start', commandLine => {
            console.log('Spawned Ffmpeg with command: ' + commandLine);
        })
        .on('error', (err, stdout, stderr) => {
            console.error('An error occurred: ' + err.message);
            console.error('ffmpeg stdout:', stdout);
            console.error('ffmpeg stderr:', stderr);
            if (!res.headersSent) {
                res.status(500).json({ success: false, error: err.message });
            }
        })
        .on('end', () => {
            console.log('Processing finished!');
        })
        .pipe(res, { end: true });
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});
'


